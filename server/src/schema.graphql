type Book {
  "Generated by json-server"
  id: ID!
  "ISBN Number"
  isbn: String!
  "Books title"
  title: String!
  "Optional Subtitle"
  subtitle: String
  "Who wrote the book"
  author: String!
  "Publisher if known"
  publisher: Publisher
  "How many pages if known"
  pages: Int
  "What the book is about"
  description: String
}
# [] means it returns a list of the object type in this case Book
type Publisher {
  id: ID!
  name: String!
  books: [Book]
}
# The "Query" type is the root of all GraphQL queries.
# (x: yyy) are the parameters passed into the function
type Query {
  books: [Book]
  book(id: ID!): Book
  publisher(id: ID!): Publisher
  publishers: [Publisher]
}
# Mutations provide the CRUD operations in the interface
type Mutation {
  addBook(data: CreateBookInput): Book
  deleteBook(id: ID!): DeletePayload
  updateBook(data: UpdateBookInput): Book
}
# json-server does not return the deleted record so return status code
type DeletePayload {
  statuscode: Int
}
# define a definition for mutation inputs
# publisherId has to match the data source not the schema definition
input CreateBookInput {
  isbn: String!
  title: String!
  subtitle: String
  author: String!
  publisherId: ID!
  pages: Int
  description: String
}
# publisherId has to match the data source not the schema definition
input UpdateBookInput {
  id: ID!
  isbn: String
  title: String
  subtitle: String
  author: String
  publisherId: ID
  pages: Int
  description: String
}